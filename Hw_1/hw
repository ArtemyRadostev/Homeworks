0) "Установить вторую ВМ, настроить на ней только внутренний сетевой 
интерфейс и подключиться с первой машины."

 ssh 192.168.56.117 (IP второй ВМ)
      
1) "Внутри директории /usr/share/man (хранилище встроенной документации) находятся каталоги, разбитые по секциям разделов помощи (man1, man2, man3) и по языкам (es, fr, ru).
	Используя команду ls, необходимо вывести на экран все файлы, которые расположены в секционных директориях /usr/share/man/manX и содержат слово "config" в имени. 
	Одним вызовом ls найти все файлы, содержащие слово "system" в каталогах /usr/share/man/man1 и /usr/share/man/man7"
		
		ls /usr/share/man/man*/*config*
		ls /usr/share/man/man{1,7}/*system*

2)"Самостоятельно изучить команду find, предназначенную для поиска файлов/папок по заданным условиям (man find, find --help).
  Найти в директории /usr/share/man все файлы, которые содержат слово "help" в имени, найти там же все файлы, имя которых начинается на "conf".Какие действия мы можем выполнить с файлами,
  найденными командой find (не запуская других команд)? Приведите любой пример с комментарием."
		
		find /usr/share/man -name *help*
		find /usr/share/man -name conf*
		
		find /usr/share/man -name conf* -exec <command> {} \; #опция exec позволяет выполнить любую производную команду с найденными файлами
		find /usr/share/man -name conf* -execdir <command> {} \; #то же, что и exec, но команда запускается из подкаталога
		find /usr/share/man -name conf* -exec <command> {} + \; #то же, что и exec, но позволяет обработать более одного найденного файла (при ксловии, что он существует)
		find /usr/share/man -name conf* -execdir <command> {} + \; #то же, что и execdir, но позволяет обработать более одного найденного файла (при ксловии, что он существует)
		find /usr/share/man -name conf* -ok <command>  {} \; #то же, что и exec, но спрашивает разрешение перед каждым действием
		find /usr/share/man -name conf* -okdir <command>  {} \; #то же, что и execdir, но спрашивает разрешение перед каждым действием
		find /usr/share/man -name conf* -print #опция print позволяет выводить полные имена файлов
		find /usr/share/man -name conf* -print0 #то же, что и print, но после каждого имени следует ASCII null
		find /usr/share/man -name conf* -delete #опция delete позволяет удалять найденные файлы
		find /usr/share/man -name conf* -fls file_name #опция fls записывает информацию о файле в file_name
		find /usr/share/man -name conf* -ls #опция ls отображает полную информацию о файле
		find /usr/share/man -name conf* -prune #(относится скорее к поиску, чем к действию с файлом) если найденное соответсвие является директорией, то не "спускается" в нее (не работает при заданном -depth)
		find /usr/share/man -name conf* -fprint file_name #опция fprint записывает полные имена найденных файлов в file_name
		find /usr/share/man -name conf* -fprint0 file_name #то же, что и print0, но работает как fprint (записывает полные имена найденных файлов в file_name, но после каждого имени следует ASCII null)
		find /usr/share/man -name conf* -fprintf file_name format #то же, что и fprint, но дополнительно format, обозначающий дополнительную тнформацию для отображения
    
    
3) "При помощи команд head и tail, выведите последние 2 строки файла /etc/fstab и первые 7 строк файла /etc/yum.conf
Что произойдёт, если мы запросим больше строк, чем есть в файле? Попробуйте выполнить это на примере, используя команду wc (word cound) для подсчёта количества строк в файле."
		
		tail -n 2 /etc/fstab
		head -n 7 /etc/yum.conf
		wc /etc/fstab #считаем строки fstab
		head -n 500 /etc/fstab #запрашиваем намного большее кол-во строк, чем имеется в файле
	#При попытке вывода большего кол-ва строк, чем имеется в файле, то выведется только имеющееся кол-во строк
  
4) "Создайте в домашней директории файлы file_name1.md, file_name2.md и file_name3.md. Используя {}, переименуйте:"
																										file_name1.md в file_name1.textdoc
																										file_name2.md в file_name2
																										file_name3.md в file_name3.md.latest
																										file_name1.textdoc в file_name1.txt
		
		touch file_name{1..3}.md
		mv file_name1{.md,.textdoc}; mv file_name2{".md",};mv file_name3{".md",".md.latest"}
		mv file_name1{.textdoc,.txt}


5) "Перейдите в директорию /mnt. Напишите как можно больше различных вариантов команды cd, с помощью которых вы можете вернуться обратно в домашнюю директорию вашего пользователя. 
   Различные относительные пути также считаются разными вариантами."

		cd /home/art
		cd --
		cd ~
		cd
    
6) "Создайте одной командой в домашней директории 3 папки new, in-process, processed. При этом in-process должна содержать в себе еще 3 папки tread0, tread1, tread2.
Далее создайте 100 файлов формата data[[:digit:]][[:digit:]] в папке new
Скопируйте 34 файла в tread0 и по 33 в tread1 и tread2 соответственно. Выведете содержимое каталога in-process одной командой
После этого переместите все файлы из каталогов tread в processed одной командой. Выведете содержимое каталога in-process и processed опять же одной командой
Сравните количество файлов в каталогах new и processed при помощи изученных ранее команд, если они равны удалите файлы из new"

		mkdir -p new in-process/tread{0..2} processed
		cd new
		touch data{0..99}
		cp new/data{0..33} in-process/tread0
		cp new/data{34..66} in-process/tread1
		cp new/data{67..99} in-process/tread2
		ls -LR in-process
		mv in-process/*/* processed/
		ls -LR {in-process,processed}
		ls new  |wc -l
		ls processed  |wc -l
		rm new/*
		
    
    
7.*Получить разворачивание фигурных скобок для выражения. Согласно стандартному поведению bash, стандартного для CentOS 7, скобки в приведённом ниже выражении развёрнуты не будут. 
Необходимо найти способ получить ожидаемый вывод.
												a=1; b=3
												echo file{$a..$b}
Необходимо предоставить модицицированную команду,
результатом которой является следующий вывод:   file1 file2 file3
В баше можно задавать переменные:
		a=1; b=3
		eval echo file{$a..$b}
